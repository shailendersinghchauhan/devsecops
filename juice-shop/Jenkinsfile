// This pipeline performs a full suite of automated security testing
// - build: Build Docker image
// - push: Push Docker image to registry
// - scan: Scan container image

pipeline {
    environment { // Environment variables defined for all steps
        DOCKER_IMAGE = "registry.demo.local:5000/juice-shop"
        TOOLS_IMAGE = "registry.demo.local:5000/tools-image"
        JENKINS_UID = 1001 // User ID under which Jenkins runs
        JENKINS_GID = 900 // Group ID under which Jenkins runs
        SONAR_KEY = "juice-shop"
    }

    agent any

        stage("Scan container") {
            agent {
                docker {
                    image "$TOOLS_IMAGE"
                    // Make sure that the container can access anchore-engine_api_1
                    args "--network=lab"
                    reuseNode true
                }
            }
            steps {
                // Continue the build, even after policy failure
                script {
                    sh label: "Ensure XYZ Container Scanning tool is available",
                        script: "anchore-cli system status"
                    sh label: "Add to queue",
                        script: "anchore-cli image add ${DOCKER_IMAGE}:$tag"
                    sh label: "Wait for analysis",
                        script: "anchore-cli image wait ${DOCKER_IMAGE}:$tag"
                    sh label: "Generate list of vulnerabilities",
                        script: "anchore-cli image vuln $DOCKER_IMAGE:$tag all | tee anchore-results.txt"
                    def result = sh label: "Check policy",
                        script: "anchore-cli evaluate check ${DOCKER_IMAGE}:$tag --detail >> anchore-results.txt"
                    if (result > 0) {
                        unstable(message: "Policy check failed")
                    }
                }
            }
        }

     }

   }
